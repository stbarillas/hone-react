{"version":3,"sources":["components/radioButtons.js","components/table.js","components/chart.js","components/navbar.js","tasks/dateFormat.js","app.js","index.js"],"names":["GraphRadioButtons","props","react_default","a","createElement","id","lib","name","value","className","onClick","TableRadioButtons","RenderTable","currency","formatData","dates","currencyIndex","Object","keys","reverse","outputlist","i","days","outputDict","date","price","push","shadow","rows","align","tooltip","numeric","RenderChart","chartData","labels","slice","maxDays","datasets","label","data","values","backgroundColor","borderColor","borderWidth","lineTension","pointBackgroundColor","es","options","title","display","text","fontSize","fontFamily","fontWeight","scales","yAxes","scaleLabel","labelString","ticks","beginAtZero","xAxes","Navbar","transparent","src","alt","style","width","height","href","formatDate","dateObject","getFullYear","String","getMonth","padStart","getDate","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","USD","EUR","GBP","newVal","setState","apiCall","_this2","dateEnd","Date","dateStart","current","getTime","milliseconds","millisecondCalc","previousDate","currencies","x","fetch","then","response","json","stateCopy","catch","err","console","log","setCurrency","_this3","length","components_navbar","col","components_table","updateData","chart","setDays","React","Component","ReactDOM","render","src_app","document","getElementById"],"mappings":"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","file":"static/js/main.b3c9649b.chunk.js","sourcesContent":["import React from 'react';\nimport {RadioGroup, Radio} from 'react-mdl';\nimport \"./radioButtons.css\";\n\n// Takes props.onclick and renders radio group and buttons\n// When onClick is called, passes its value to a function that injects this value to setDays method\nfunction GraphRadioButtons(props){\n     return (\n            <div id={\"radioContainer\"}>\n                <RadioGroup name=\"GraphRadioButtons\" value=\"1095\">\n                    <Radio className={\"radioButtons\"} value=\"30\" onClick={() => props.onClick(30)}>1 Month</Radio>\n                    <Radio className={\"radioButtons\"} value=\"91\" onClick={() => props.onClick(91)}>3 Months</Radio>\n                    <Radio className={\"radioButtons\"} value=\"182\" onClick={() => props.onClick(182)}>6 Months</Radio>\n                    <Radio className={\"radioButtons\"} value=\"365\" onClick={() => props.onClick(365)}>1 Year</Radio>\n                    <Radio className={\"radioButtons\"} value=\"730\" onClick={() => props.onClick(730)}>2 Years</Radio>\n                    <Radio className={\"radioButtons\"} value=\"1095\" onClick={() => props.onClick(1095)}>3 Years</Radio>\n                </RadioGroup>\n            </div>\n        );\n}\n\nfunction TableRadioButtons(props){\n    return (\n        <div id={\"radioContainer\"}>\n            <RadioGroup name=\"TableRadioButtons\" value=\"USD\">\n                <Radio className={\"radioButtons\"} value=\"USD\" onClick={() => props.onClick('USD')}>USD</Radio>\n                <Radio className={\"radioButtons\"} value=\"EUR\" onClick={() => props.onClick('EUR')}>EUR</Radio>\n                <Radio className={\"radioButtons\"} value=\"GBP\" onClick={() => props.onClick('GBP')}>GBP</Radio>\n            </RadioGroup>\n        </div>\n    );\n}\n\nexport {GraphRadioButtons, TableRadioButtons};","import React from \"react\";\nimport {DataTable, TableHeader} from \"react-mdl\";\nimport \"./table.css\"\nimport {TableRadioButtons} from './radioButtons'\n\n// Takes dates and days as properties to render dynamic table with correct number of rows\nfunction RenderTable(props) {\n    // Reverses dates in order to display most recent date at the top of the table\n    let currency = props.currency,\n        formatData = props.dates[props.currencyIndex[currency]],\n        dates = Object.keys(formatData).reverse(),\n        // Creates empty output list that will get populated below\n        outputlist = [];\n    // Iterate through dates, creating an object each time that is pushed to outputList\n    for (let i = 0; i < props.days; i++) {\n        let outputDict = {},\n            date = dates[i],\n            price = formatData[date];\n        outputDict.date = date;\n        outputDict.price = price;\n        // Populates outputList with object\n        outputlist.push(outputDict);\n    }\n    return(\n        <div>\n            <h1 id={\"tableTitle\"}>Price Table</h1>\n            <DataTable shadow={0} rows={outputlist} align={\"center\"}>\n                <TableHeader name=\"date\" tooltip=\"The amazing material name\">Date</TableHeader>\n                <TableHeader numeric name=\"price\" tooltip=\"Price per unit\">\n                    <TableRadioButtons onClick={(currency)=>props.onClick(currency)}/>\n                </TableHeader>\n            </DataTable>\n        </div>\n\n    )\n}\n\n\nexport default (RenderTable);","import {Line} from \"react-chartjs-2\";\nimport React from \"react\";\nimport {GraphRadioButtons} from \"./radioButtons\"\n\n\n// Takes Dates and days to create dynamic chart with correct number of data points\nfunction RenderChart(props) {\n    let currency = props.currency,\n        dates = props.dates[props.currencyIndex[currency]];\n    let chartData = {\n        // Slice dates using number of days\n        labels: Object.keys(dates).slice(props.maxDays - props.days, props.maxDays),\n        datasets: [{\n            label: '',\n            data: Object.values(dates).slice(props.maxDays - props.days, props.maxDays),\n            backgroundColor: [\n                \"rgb(59, 136, 252, .2)\",\n            ],\n            borderColor: [\n                \"rgba(0, 0, 0, 0.3)\",\n            ],\n            borderWidth: 3,\n            lineTension: .1,\n            pointBackgroundColor: \"rgb(59, 136, 252)\"\n        }]\n    }\n    let chartOptions = {\n        title: {\n            display: true,\n            text: \"Historical BTC Data\",\n            fontSize: 20,\n            fontFamily:\"Roboto\",\n            fontWeight:\"bold\"\n        },\n        scales: {\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: \"Price (USD)\",\n                },\n                ticks: {\n                    beginAtZero: false\n                }\n            }],\n            xAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: \"Date\",\n                }\n            }]\n        }\n    };\n\n    return (\n        <div>\n            <Line\n                data={chartData}\n                options={chartOptions}\n            />\n            <GraphRadioButtons onClick={(days)=>props.onClick(days)}/>\n        </div>\n    );\n}\n\nexport default (RenderChart);","import {Header, Layout, Navigation} from \"react-mdl\";\nimport React from \"react\";\nimport \"./navbar.css\";\n\nfunction Navbar() {\n    return (\n        <div className={'navbar has-depth'}>\n            <Layout>\n                <Header className={\"is-vertically-centered\"} transparent title=\n                    {<img src=\"http://honecap.com/wp-content/uploads/2017/03/HONE-LOGO.svg\"\n                          alt=\"hone cap logo\" style={{width: \"200px\", height: \"49px\"}}/>}\n                >\n                    <Navigation>\n                        <a className={\"navbar-item\"} href=\"https://github.com/stbarillas/hone-react\">\n                            <span>Source Code</span>\n                        </a>\n                        <a className={\"navbar-item\"} href=\"http://stevebarillas.com/\">\n                            <span>Portfolio</span>\n                        </a>\n                    </Navigation>\n                </Header>\n            </Layout>\n        </div>\n    );\n}\n\nexport default (Navbar)","\nfunction millisecondCalc(days){\n    const milliseconds = days * 24 * 60 * 60 * 1000;\n    return milliseconds;\n}\n\nfunction formatDate(dateObject){\n    const year = dateObject.getFullYear(),\n        // Index starts with Jan = 0, so we add +1 so the output is accurate\n        month = String((dateObject.getMonth() + 1)).padStart(2,'0'),\n        day = String((dateObject.getDate())).padStart(2,'0');\n    return(year + \"-\"+ month + \"-\" + day);\n}\n\nfunction currentDate(){\n    const dateObject = new Date();\n    return(formatDate(dateObject));\n}\n\nfunction previousDate(days){\n    let current = new Date().getTime(),\n        milliseconds = millisecondCalc(days),\n        difference = current-milliseconds;\n    return (formatDate(new Date(difference)));\n\n\n}\n\nexport {currentDate, previousDate};","import React from 'react';\nimport {Grid, Cell} from 'react-mdl';\nimport './app.css';\nimport RenderTable from \"./components/table\";\nimport RenderChart from \"./components/chart\";\nimport Navbar from './components/navbar';\nimport {currentDate, previousDate} from './tasks/dateFormat'\n\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            days: 1095,\n            dates: [],\n            maxDays: 1095,\n            currency: 'USD',\n            currencyIndex: {'USD':0, 'EUR':1, 'GBP': 2}\n        }\n    }\n    setDays(newVal) {\n        this.setState({days: newVal})\n    }\n    setCurrency(newVal) {\n        this.setState({currency: newVal})\n    }\n\n    componentDidMount() {\n        this.apiCall()\n    }\n\n    apiCall(){\n        const dateEnd = currentDate(),\n            dateStart = previousDate(this.state.maxDays),\n            currencies = [\"USD\", \"EUR\", \"GBP\"];\n        // API call function\n        for (let x in currencies) {\n            fetch('https://api.coindesk.com/v1/bpi/historical/close.json' +\n                '?currency='+ currencies[x] + '&start='+dateStart+'&end='+dateEnd)\n            // Converts API response to json\n                .then( (response) => {\n                    return response.json();\n                })\n                // Calls render functions with bci object and days as parameters.\n                .then((data) => {\n                    let stateCopy = this.state.dates;\n                    stateCopy.push(data['bpi']);\n                    this.setState({dates: stateCopy});\n                })\n                // Displays error if API call is unsuccessful\n                .catch((err) => {\n                    console.log(\"API fetch was unsuccessful\");\n                    console.log(err);\n                })\n        }\n    }\n\n    updateData(currency){\n        this.setCurrency(currency);\n        // this.apiCall();\n    }\n\n    render() {\n\n        if (this.state.dates.length){\n            return (\n                <div id={\"appBody\"}>\n                    {/*Navbar section*/}\n                    <Navbar/>\n                    {/*Columns section*/}\n                    <div>\n                        <Grid className=\"columns\">\n                            {/*Table column*/}\n                            <Cell col={4} className={'column'}>\n                                {/*Pass dates and days to table component*/}\n                                <RenderTable dates={this.state.dates} days={this.state.days}\n                                             currency={this.state.currency} currencyIndex={this.state.currencyIndex}\n                                             onClick={(currency) => this.updateData(currency)}\n                                />\n                            </Cell>\n                            {/*Graph column*/}\n                            <Cell col={8}>\n                                {/*Pass dates and days to chart component*/}\n                                <RenderChart dates={this.state.dates} days={this.state.days}\n                                             currency={this.state.currency} currencyIndex={this.state.currencyIndex}\n                                             onClick={(days) => this.setDays(days)} maxDays={this.state.maxDays}\n                                />\n                            </Cell>\n                        </Grid>\n                    </div>\n                </div>\n            );\n        }\n        else{\n            return <div></div>\n        }\n    }\n}\n\nexport default(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport './index.css';\nimport App from './app';\n\n// ========================================\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}